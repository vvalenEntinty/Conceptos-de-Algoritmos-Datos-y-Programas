{
La cátedra de CADP está organizando el parcial, y necesita un programa para obtener información sobre los alumnos recursantes que rendirán.
a)
Realizar un módulo que retorne la información de los alumnos en una estructura de datos adecuada.
Dicha información se lee por teclado sin ningún orden. De cada alumno se lee su DNI, nombre, apellido, año de ingreso, y nota obtenida (entre 0 y 10) en cada una de las 10 autoevaluaciones. 
En caso de no realizar alguna autoevaluación, se asigna la nota -1. La lectura finaliza cuando se ingresa el DNI 33016244 (que debe procesarse).
b)
Realizar un módulo que reciba la estructura de datos generada en el inciso anterior, e IMPRIMA en pantalla:
DNI de los alumnos que podrán rendir el parcial de CADP. Para poder rendir, los alumnos deben haber realizado al menos 8 autoevaluaciones y deben haber aprobado (nota 6 o superior) al menos 4 autoevaluaciones.
El porcentaje de alumnos que hayan ingresado en el año 2020 y que se hayan presentado a todas las autoevaluaciones, sobre el total de alumnos.
Apellido y nombre de aquellos alumnos donde la suma de los dígitos del DNI es par.
}


program parcial;
const
	Max_Autoevaluacion=10;
	Max_Nota=10;
type
	rango_nota=0..max_nota;
	rango_autoevaluaciones=1..max_autoevaluacion;
	
	vector_notas=array[rango_autoevaluaciones] of integer;
	
	alumno=record
		dni:integer;
		nombre:string[20];
		apellido:string[20];
		ingreso:integer;
		nota:vector_notas;
	end;

	lista_alumnos=^nodo;
	nodo=record
		dato:alumno;
		sig:lista_alumnos;
	end;
	
	procedure Leer_autoevaluaciones (var v:vector_notas);
	var
		i:rango_autoevaluaciones;
	begin
		for i := 1 to max_nota do 
			readln(v[i]);
		end;
	
	procedure LeerAlumno (var a:alumno);

	begin
		writeln('Ingresar dni');readln(a.dni );
		writeln('Ingresar nombre');readln(a.nombre );
		writeln('Ingresar apellido');readln(a.apellido );
		writeln('Ingresar ingreso');readln(a.ingreso );
		writeln('Ingresar notas (entre 0 y 10), si no se realizo, ingresar -1');
		Leer_Autoevaluaciones (a.nota);
	end;
	
	procedure ArmarNodo (var L:lista_alumnos; a:alumno);
	var
		nue:lista_alumnos;
	begin
		new(nue);
		nue^.dato:=a;
		nue^.sig:=L;
		L:=nue;
	end;
	
	
	procedure CargarAlumnos (var L:lista_alumnos);
	var
		a:alumno;
	begin
		repeat
			LeerAlumno(a);
			ArmarNodo(L,a);
		until (a.dni = 3301);
	end;
	
	procedure PuedeRendir (var cant_rendidas,cant_aprobadas:integer;nota:vector_notas);	
	var
		i:rango_autoevaluaciones;
	begin
		cant_rendidas:=0; 
		cant_aprobadas:=0;
		for i := 1 to max_autoevaluacion do 
			if (nota[i]>=0) then begin
				cant_rendidas:=cant_rendidas + 1;
				if (nota[i]>=6) then
				cant_aprobadas:=cant_aprobadas + 1;		
		end;
	end;
	
	function Suma_Digitos_DNI(dni:integer):boolean;
	var
		dig,suma:integer;
	begin
		suma:=0;
		while(dni<>0) do begin
			dig:=dni mod 10;
			suma:=suma + dig;
			dni:=dni div 10;
		end;
		suma_digitos_dni:= (suma mod 2 = 0);
	end;
	
	
	procedure Imprimir (L:lista_alumnos);
	var
		porcentaje:real;
		cant_rendidas,cant_aprobadas:integer;
		total_alumnos,cant_alumnos_2020:integer;
	begin
		total_alumnos:=0; cant_alumnos_2020:=0 ;
		while (L <> nil) do begin
			
			PuedeRendir(cant_rendidas,cant_aprobadas,L^.dato.nota);	
			
			if (cant_rendidas >= 8) and (cant_aprobadas >= 4) then
				writeln('El alumno con dni: ',L^.dato.dni,' puede rendir el examen');
			
			total_alumnos:=total_alumnos + 1;
			
			if (L^.dato.ingreso = 2020) and (cant_rendidas = max_autoevaluacion) then
				cant_alumnos_2020:=cant_alumnos_2020 + 1;
			
			if (Suma_Digitos_DNI(L^.dato.dni)) then
				writeln(L^.dato.apellido,' ',L^.dato.nombre);
			
			L:=L^.sig;
		end;
	porcentaje:=((cant_alumnos_2020*100)/total_alumnos);
	writeln('El porcentaje de alumnos que ingresaron en 2020 y rindieron todas las autoevaluaciones es: %',porcentaje:0:2);
end;
			
	
var
	Lista:lista_alumnos;
begin
	Lista:=nil;
	CargarAlumnos(Lista);
	Imprimir(Lista);
end.
