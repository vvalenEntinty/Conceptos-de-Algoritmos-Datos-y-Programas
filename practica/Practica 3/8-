{La Comisión Provincial por la Memoria desea analizar la información de los proyectos presentados en el
programa Jóvenes y Memoria durante la convocatoria 2020. Cada proyecto posee un código único, un título, el
docente coordinador (DNI, nombre y apellido, email), la cantidad de alumnos que participan del proyecto, el
nombre de la escuela y la localidad a la que pertenecen. Cada escuela puede presentar más de un proyecto. La
información se ingresa ordenada consecutivamente por localidad y, para cada localidad, por escuela. Realizar
un programa que lea la información de los proyectos hasta que se ingrese el proyecto con código -1 (que no
debe procesarse), e informe:
● Cantidad total de escuelas que participan en la convocatoria 2018 y cantidad de escuelas por cada
localidad.
● Nombres de las dos escuelas con mayor cantidad de alumnos participantes.
● Título de los proyectos de la localidad de Daireaux cuyo código posee igual cantidad de dígitos pares e
impares.}
program ej;
type
    info_docente =record     
        dni:integer;
        nomyape:string;
        email:string;
    end;
    proyecto=record
        codigo:integer;
        titulo:string;
        docente:info_docente;
        cant_alumnos:integer;
        escuela:string;
        localidad:string;
    end;
    

    procedure leer(var p: proyecto);
begin
  writeln('Ingrese el código del proyecto: ');
  readln(p.codigo);
  
  writeln('Ingrese el título del proyecto: ');
  readln(p.titulo);
  
  writeln('Ingrese la cantidad de alumnos: ');
  readln(p.cant_alumnos);
  
  writeln('Ingrese la escuela: ');
  readln(p.escuela);
  
  writeln('Ingrese la localidad: ');
  readln(p.localidad);

  // Leer datos del docente
  writeln('Ingrese los datos del docente:');
  
  writeln('  Ingrese el DNI del docente: ');
  readln(p.docente.dni);
  
  writeln('  Ingrese el nombre y apellido del docente: ');
  readln(p.docente.nomyape);
  
  writeln('  Ingrese el email del docente: ');
  readln(p.docente.email);
end;

    procedure ActualizarDosNombres (var MaxNombre1,MaxNombre2:string; nombre:string;cant:integer; var Max:integer);
    begin
        if (max<cant) then 
        begin
            MaxNombre2:=MaxNombre1;
            MaxNombre1:=nombre;
            max:=cant;
        end;
    end;
    
    function ParesImpares (cod:integer):boolean;
    var
        dig,par,impar:integer;
    begin
        par:=0;impar:=0;
        while (cod <> 0) do 
        begin
            dig:= cod mod 10;
            if (dig mod 2 = 0) then 
                par:=par +1
            else    
                impar:=impar + 1;
            cod:=cod div 10;
        end;
        ParesImpares:=(par=impar);
    end;    
var
    p:proyecto;
    localAct,EscuelaAct,MaxNombre1,MaxNombre2:string;
    cantEscuelasLocal,cantEscuelasTotal,MaxParticipantes:integer;
begin
    cantEscuelasTotal:=0; MaxNombre2:='';MaxNombre1:='';
    leer(p);
    while (p.codigo <> -1) do
    begin
        localAct:=p.localidad;
        while (p.localidad = localAct ) do 
        begin
            escuelaAct:=p.escuela;
            cantEscuelasLocal:=0;
            MaxParticipantes:=0;
            while (p.escuela = escuelaAct) and (p.localidad = localAct) do 
            begin
                cantEscuelasLocal:=cantEscuelasLocal + 1;
                cantEscuelasTotal:=0;
                ActualizarDosNombres(MaxNombre1,MaxNombre2,p.titulo,p.cant_alumnos,MaxParticipantes);
                if (ParesImpares(p.codigo))and (p.localidad = 'Daireaux') then
                    writeln('Proyecto de la localiad de Daireaux con codigo de misma cantidad de pares e impares: ',p.titulo);
                leer (p);
            end;
            writeln('Cantidad de escuelas en ',localAct,' es : ',cantEscuelasLocal);
        end;
    end;
    writeln('titulo de las dos escuelas con misma cantidad de pares e impares en su codigo: ',MaxNombre1,' y ',MaxNombre2);
    writeln('cantida total de escuelas: ',cantEscuelasTotal);
end.
